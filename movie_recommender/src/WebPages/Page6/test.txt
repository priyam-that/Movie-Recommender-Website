import React, { useEffect, useRef, useState } from 'react'
import style from '../Styles/detailsStyle.module.css'
import ReactPlayer from 'react-player'
import { RxCross2 } from "react-icons/rx";
import { useLocation } from 'react-router-dom';
import { FaCalendarDays } from "react-icons/fa6";
import { FaStar } from "react-icons/fa";
import { FaClock } from "react-icons/fa6";
import { IoIosArrowDown } from "react-icons/io";
import { IoIosArrowUp } from "react-icons/io";
import Recommendations from './Recommendations';
import Loader from './Loader';
import Comment from './Comment';
// Custom Comments Component
// const CommentSection = ({ movieId, movieTitle }) => {
  // const [comments, setComments] = useState([]);
  // const [newComment, setNewComment] = useState('');
  // const [userName, setUserName] = useState('');

  // // Load comments from localStorage
  // useEffect(() => {
  //   const storedComments = JSON.parse(localStorage.getItem(`comments_${movieId}`)) || [];
  //   setComments(storedComments);
  // }, [movieId]);

  // // Save comment to localStorage
  // const saveComment = () => {
  //   if (!newComment.trim() || !userName.trim()) {
  //     alert('Please enter both your name and comment');
  //     return;
  //   }

  //   const commentObj = {
  //     id: Date.now(),
  //     name: userName,
  //     text: newComment,
  //     date: new Date().toLocaleString()
  //   };

  //   const updatedComments = [...comments, commentObj];
  //   setComments(updatedComments);
  //   localStorage.setItem(`comments_${movieId}`, JSON.stringify(updatedComments));

  //   // Reset input fields
  //   setNewComment('');
  //   setUserName('');
  // };

  // // Delete a comment
  // const deleteComment = (commentId) => {
  //   const updatedComments = comments.filter(comment => comment.id !== commentId);
  //   setComments(updatedComments);
  //   localStorage.setItem(`comments_${movieId}`, JSON.stringify(updatedComments));
  // };

  // return (
  //   <div className={style.commentsSection}>
  //     <div style={{ fontSize: "1.3em", color: "rgb(238, 1, 255)", marginBottom: "1em" }}>
  //       Comments for {movieTitle}
  //     </div>

  //     {/* Comment Input Section */}
  //     <div className={style.commentInputContainer}>
  //       <input 
  //         type="text" 
  //         placeholder="Your Name" 
  //         value={userName}
  //         onChange={(e) => setUserName(e.target.value)}
  //         style={{
  //           width: '100%', 
  //           padding: '10px', 
  //           marginBottom: '10px', 
  //           borderRadius: '5px',
  //           border: '1px solid #ccc'
  //         }}
  //       />
  //       <textarea 
  //         placeholder="Write a comment..." 
  //         value={newComment}
  //         onChange={(e) => setNewComment(e.target.value)}
  //         style={{
  //           width: '100%', 
  //           padding: '8px', 
  //           marginBottom: '10px', 
  //           minHeight: '100px',
  //           borderRadius: '5px',
  //           border: '1px solid #ccc'
  //         }}
  //       />
  //       <button 
  //         onClick={saveComment}
  //         style={{
  //           backgroundColor: 'rgb(238, 1, 255)',
  //           color: 'white',
  //           padding: '10px 20px',
  //           border: 'none',
  //           borderRadius: '5px',
  //           cursor: 'pointer'
  //         }}
  //       >
  //         Post Comment
  //       </button>
  //     </div>

  //     {/* Comments List */}
  //     <div className={style.commentsList}>
  //       {comments.length === 0 ? (
  //         <p style={{ color: '#888', textAlign: 'center' }}>No comments yet. Be the first to comment!</p>
  //       ) : (
  //         comments.map((comment) => (
  //           <div 
  //             key={comment.id} 
  //             style={{
  //               backgroundColor: '#f4f4f4',
  //               padding: '15px',
  //               marginBottom: '10px',
  //               borderRadius: '5px',
  //               position: 'relative'
  //             }}
  //           >
  //             <div style={{ fontWeight: 'bold', color: 'rgb(238, 1, 255)' }}>
  //               {comment.name}
  //             </div>
  //             <div style={{ marginTop: '5px', color: '#333' }}>
  //               {comment.text}
  //             </div>
  //             <div style={{ 
  //               fontSize: '0.8em', 
  //               color: '#888', 
  //               marginTop: '10px' 
  //             }}>
  //               {comment.date}
  //             </div>
  //             <button 
  //               onClick={() => deleteComment(comment.id)}
  //               style={{
  //                 position: 'absolute',
  //                 top: '10px',
  //                 right: '10px',
  //                 backgroundColor: 'red',
  //                 color: 'white',
  //                 border: 'none',
  //                 borderRadius: '3px',
  //                 padding: '5px 10px',
  //                 fontSize: '0.8em',
  //                 cursor: 'pointer'
  //               }}
  //             >
  //               Delete
  //             </button>
  //           </div>
  //         ))
  //       )}
  //     </div>
  //   </div>
  // );
// };

const Details = () => {
  const getTitle = useLocation(); //used to get the passed props when redirected
  const [movieName, setMovieName] = useState(""); //used to get the movie name that is selected to watch the details

  //setting the movie name which is selected
  useEffect(() => {
    setMovieName(getTitle.state.movieTitle);
  });

  const [content, setContent] = useState({});//used to store the details of the movie
  const [showPlayer, setShowPlayer] = useState(false);//used to handle the trailer need to show or not
  const [showPoster, setShowPoster] = useState(true); //used to show poster or not
  const [btnClicked, setBtnClicked] = useState(false);//used to set the classname of the poster or trailer
  const [trailer, setTrailer] = useState("");//used to store the trailer link
  const [directors, setDirectors] = useState([]);//used to store the directors
  const [cast, setCast] = useState([]);//used to store the casts
  const [showMoreBtn,setShowMoreBtn]= useState(true);//used to show more casts
  const [showLessBtn,setShowLessBtn]=useState(false);//used to show less number of casts
  const [recommendedMovies,setRecommendedMovies]=useState([]);//used to store recommended movie names
  const [loading,setLoading]=useState(false);//used to show the loader or not
  const borderRef = useRef();//used to get the reference of outline of the poster
  
  const api_key = "1131ab6f7e96fcc1c729699cbf8b22cc";

  //function to manage the transition from poster to player
  const manage = () => {
    setBtnClicked(true);
    borderRef.current.style.animation = "none";
    borderRef.current.style.background = "none";
    setTimeout(() => {
      setShowPlayer(true);
      setShowPoster(false);
    }, 2000)
  }

  //function to close the trailer
  const closeTrailer = () => {
    setBtnClicked(false);
    setShowPlayer(false);
    setShowPoster(true);
  }

  //fetching all about the movie
  const fetchDetails = async () => {
    try {
      // showing the loader till full details is loaded
      setLoading(true);

      //fetching by the moviename to get the id of the movie
      const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${movieName}`);
      const data = await res.json(); 
      const movieId = data.results[0].id;

      //fetching by the movie id that is got to get all details about the movie
      const detailsRes = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${api_key}&append_to_response=videos`);
      const detailsData = await detailsRes.json();
      setContent(detailsData); //storing the data of the details in the dedicated state variable
     
      //fetching the cast and crew 
      const castRes = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${api_key}`);
      const castData = await castRes.json();

      setCast(castData.cast);//storing the cast in the dedicated state variable
      setShowMoreBtn(true);
      setShowLessBtn(false);

      setDirectors(castData.crew.filter((e) => { return (e.job == "Director" && e.department == "Directing") }));//storing the directors in the dedicated state variable

      //separating the trailer from the received object
      const trailers = detailsData.videos.results.filter((vid) => { return vid.type == "Trailer" })
      if(trailers[0]){
        setTrailer(`https://www.youtube.com/watch?v=${trailers[0].key}`);//storing the trailer link in the dedicated state variable
      }

      //fetching the recommendations of the movie using the flask api
      const recommendationResponse=await fetch(`/api/similarity/${movieName}`);
      const recommendationData= await recommendationResponse.json();
      const recomMovies=recommendationData.movies
      const recomMovieArr=[];
      for(const movie of recomMovies){ 
        //fetching details of each recommended movies
        const recommendedMovieIdRes= await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${movie}`);
        const recommendedMovieIdData= await recommendedMovieIdRes.json();
        
        recomMovieArr.push(recommendedMovieIdData.results[0]);
      }
      setRecommendedMovies(recomMovieArr);//storing the recommended movies with their details in the dedicated state variable

      setLoading(false);
    } catch (err) {
      console.log(err);
    }
  }

  //fetching details and all about the movie as new movie name is searched
  useEffect(() => {
    if(movieName){
      fetchDetails();
    }
  }, [movieName]);
  
  //function to show more casts
  const appearMore=()=>{
    const container=document.getElementById("castContainer");
    
    container.style.minHeight="42rem";
    container.style.maxHeight="50vw";
    
    setShowLessBtn(true);
    setShowMoreBtn(false);
  }

  //function to show less casts
  const appearLess=()=>{
    const container=document.getElementById("castContainer");
    container.style.minHeight="";
    container.style.maxHeight="";
    setShowLessBtn(false);
    setShowMoreBtn(true);
  }

  return (
    <>
      {/* showing the loader till all the details is loaded */}
      {loading && <Loader />}
      {
        /* if loading is completed then show all details */
        !loading && 
        <>
        {/* creating the background div */}
        <div className={style.detailsBody} style={{ background: `url(https://image.tmdb.org/t/p/w500${content.backdrop_path}) no-repeat center / cover` }}>
        {/* creating a div that will contain all the details and trailer/poster */}
        <div className={style.infoAndTrailer}>
          {/* creating a section that contains the details of the movie */}
          <section className={style.detailsPrimarySection1}>
            <div className={style.detailsHolder}>
              <div className={style.title}>{`${content.title}`}</div>
              <div className={style.genres}>
                {
                  content.genres && content.genres.map((genre, index) => {
                    return (
                      <div style={{ marginRight: index < content.genres.length - 1 ? "8px" : "0" }} key={index}>
                        {`${genre.name}`}
                        {index < content.genres.length - 1 ? <span> | </span> : <span></span>}
                      </div>
                    )
                  })
                }
              </div>

              <div className={style.intro}>{`${content.overview}`}</div>
              
              {/* creating a div contains the informations */}
              <div className={style.info}>
                {/* part 1 of the info */}
                <div className={style.infoParts}>
                  <div><FaCalendarDays style={{ color: "rgb(238, 1, 255)" }} /><p style={{ color: "rgb(238, 1, 255)" }} >Release Date :</p>{` ${content.release_date}`}</div>

                  <div><FaStar style={{ color: "rgb(238, 1, 255)" }} /><p style={{ color: "rgb(238, 1, 255)" }}>Rating :</p> {` ${content.vote_average} / 10`}</div>

                  <div><FaClock style={{ color: "rgb(238, 1, 255)" }} /><p style={{ color: "rgb(238, 1, 255)" }}>Duration :</p> {` ${Math.floor(content.runtime / 60)}h ${content.runtime % 60}m`}</div>
                </div>

                {/* part 2 of the info */}
                <div className={style.infoParts} style={{ marginLeft: "1.5em" }}>
                  <div><p style={{ color: "rgb(238, 1, 255)" }}>Budget :</p>{`${Math.floor(content.budget / 10 ** 9) > 0 ? `$ ${parseFloat((content.budget / 10 ** 9).toFixed(2))} Billion` : Math.floor(content.budget / 10 ** 6) > 0 ? `$ ${parseFloat((content.budget / 10 ** 6).toFixed(2))} Million`:"Unavailable"}`}</div>
                  <div><p style={{ color: "rgb(238, 1, 255)" }}>Box-Office :</p>{`${Math.floor(content.revenue / 10 ** 9) > 0 ? `$ ${parseFloat((content.revenue / 10 ** 9).toFixed(2))} Billion` : Math.floor(content.revenue / 10 ** 6) > 0 ? `$ ${parseFloat((content.revenue / 10 ** 6).toFixed(2))} Million`:"Unavailable"}`}</div>
                  <div><p style={{ color: "rgb(238, 1, 255)" }}>Directed By :</p>{directors.map((e, index) => { return (e.name + (index < directors.length - 1 ? " , " : " ")) })} </div>
                </div>

              </div>

            </div>
          </section>

           {/* creating another section that contains the poster/trailer of the movie */}
          <section className={style.detailsPrimarySection2}>
            {/* creating the poster */}
            {showPoster && <div className={btnClicked ? style.posterHolderAnime : style.posterHolder} onClick={() => { manage() }}>
              <div className={style.border} ref={borderRef}></div>
              <div className={style.poster} ><img style={{ height: "100%", width: "100%" }} src={`https://image.tmdb.org/t/p/w500${content.poster_path}`} alt="..." /></div>
            </div>}
            
            {/* creating the trailer */}
            {showPlayer && <div className={style.player}>
            {
              trailer?<ReactPlayer style={{ background: "black" }} height="100%" width="100%" playing light controls url={`${trailer}`} />:
              <div style={{fontSize:"1em",width:"100%",color:"aliceblue",position:"relative",top:"45%",paddingLeft:"3.5em"}}> Trailer is currently unavailable for this movie </div>
            }
              {/* creating close button as cross */}
              <RxCross2 className={style.closeBtn} onClick={() => { closeTrailer() }} />
            </div>}
          </section>
        </div>
      </div>

      {/* creating a div that holds the cast container and text the casts */}
      <div className={style.castsHolder}>
          {/* title text for casts */}
          <div style={{ fontSize: "1.3em", color: "rgb(238, 1, 255)", marginLeft: "3.5em",marginTop:"0.5em", width: "90%" }}>Casts :</div>

          {/* creating the cast container that contains the casts */}
          <div className={style.castsContainer} id='castContainer'>
            {
              cast.map((castImg, index) => {
                return (
                  castImg.name && castImg.profile_path!=null && castImg.character &&<div key={index}>
                    {
                      <a  style={{ textDecoration: "none" }} href={`https://en.wikipedia.org/wiki/${castImg.name}`} target='_blank'>
                        {
                           <div className={style.castDetails} key={index}>
                            <div style={{ height: "90%", width: "90%", background: `url(${`https://image.tmdb.org/t/p/w500${castImg.profile_path}`}) no-repeat center / cover` }} >
                              <div className={style.castName} style={{ fontSize: "0.7em", color: "aliceBlue" }}>{`${castImg.name}`}</div>
                              <div className={style.castName} style={{ fontSize: "0.7em", color: "rgb(238, 1, 255)" }}>{`${castImg.character}`}</div>
                            </div>

                          </div>
                        }
                      </a>
                    }
                  </div>
                )
              })
            }
          </div>

          {/* creating the show more casts button */}
          {
            showMoreBtn && <button onClick={()=>{appearMore()}} className={style.showCasts}><p>Show More</p> <p style={{marginTop:"0.3em"}}><IoIosArrowDown /></p></button>
          }

          {/* creating the show less casts button */}
          {
            showLessBtn &&  <button onClick={()=>{appearLess()}} className={style.showCasts}><p>Show Less</p> <p style={{marginTop:"0.3em"}}><IoIosArrowUp /></p></button>
          }
        </div>

      {/* showing the recommendations of the movie */}
      <Recommendations recommendedMovies={recommendedMovies} setLoading={setLoading} />

      {/* Custom Comments Section */}
      {content.id && (
        <Comment
          movieId={content.id} 
          movieTitle={content.title} 
        />
      )}
        </> 
      }
    </>
  )
}

export default Details